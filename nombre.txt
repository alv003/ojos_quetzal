from __future__ import division
import time

import Adafruit_PCA9685

pwm = Adafruit_PCA9685.PCA9685(address=0x40, busnum=1)

# Configure min and max servo pulse lengths
servo_min = 110  # Min pulse length out of 4096
servo_max = 610  # Max pulse length out of 4096

# Helper function to make setting a servo pulse width simpler.
def set_servo_pulse(channel, pulse):
    pulse_length = 1000000    # 1,000,000 us per second
    pulse_length //= 60       # 60 Hz
    print('{0}us per period'.format(pulse_length))
    pulse_length //= 4096     # 12 bits of resolution
    print('{0}us per bit'.format(pulse_length))
    pulse *= 1000
    pulse //= pulse_length
    pwm.set_pwm(channel, 0, pulse)

# Set frequency to 60hz, good for servos.
pwm.set_pwm_freq(60)

#servo_middle_position = 150 #(servo_max - servo_min) / 2
#pwm.set_pwm(0, 0, servo_middle_position)

def map_range(x, in_min, in_max, out_min, out_max):
# Check for zero division
  if in_max - in_min == 0:
    return out_min

  # Calculate the slope of the mapping line
  slope = (out_max - out_min) / (in_max - in_min)

  # Apply the linear mapping formula
  return out_min + slope * (x - in_min)

def maping(x):
   y = int(float(x))
   mapped_value = map_range(y, 0, 180, servo_min, servo_max)
   new = int(mapped_value)
   return new

ch57Deg = maping(135)
ch46Deg = maping(120)
pwm.set_pwm(4, ch46Deg, 0)
pwm.set_pwm(6, ch46Deg, 0)
pwm.set_pwm(5, ch57Deg, 0)
pwm.set_pwm(7, ch57Deg, 0)
time.sleep(0.2)

try:
    while True:
        #servo = int(input("Channel to use: "))
        #deg = int(float(input("Pulse value: ")))
        #mapped_value = map_range(deg, 0, 180, servo_min, servo_max)
        #print(mapped_value)  # Output: 1500
        #set_servo_pulse(5,int(mapped_value))
        #pwm.set_pwm(7, 0, int(mapped_value))
        #time.sleep(0.1)
        #pwm.set_pwm(7, int(mapped_value), 0)

        #Channel 4 & 6
        ch4Deg = maping(105)
        pwm.set_pwm(4, 0, ch4Deg)
        pwm.set_pwm(6, 0, ch4Deg)
        time.sleep(0.6)
        pwm.set_pwm(4, ch4Deg, 0)
        pwm.set_pwm(6, ch4Deg, 0)
        time.sleep(0.6)

        ch4Deg = maping(162)
        ch6Deg = maping(160)
        pwm.set_pwm(4, 0, ch4Deg)
        pwm.set_pwm(6, 0, ch6Deg)
        time.sleep(0.6)
        pwm.set_pwm(4, ch4Deg, 0)
        pwm.set_pwm(6, ch6Deg, 0)
        time.sleep(0.6)

        #Channel 5 & 7
        ch5Deg = maping(135)
        ch7Deg = maping(135)
        pwm.set_pwm(5, 0, ch5Deg)
        pwm.set_pwm(7, 0, ch7Deg)
        time.sleep(0.6)
        pwm.set_pwm(5, ch5Deg, 0)
        pwm.set_pwm(7, ch7Deg, 0)
        time.sleep(0.6)

        ch5Deg = maping(90)
        ch7Deg = maping(90)
        pwm.set_pwm(5, 0, ch5Deg)
        pwm.set_pwm(7, 0, ch7Deg)
        time.sleep(0.6)
        pwm.set_pwm(5, ch5Deg, 0)
        pwm.set_pwm(7, ch7Deg, 0)
        time.sleep(0.6)

        ch5Deg = maping(50)
        ch7Deg = maping(50)
        pwm.set_pwm(5, 0, ch5Deg)
        pwm.set_pwm(7, 0, ch7Deg)
        time.sleep(0.6)
        pwm.set_pwm(5, ch5Deg, 0)
        pwm.set_pwm(7, ch7Deg, 0)
        time.sleep(0.6)

        ch5Deg = maping(90)
        ch7Deg = maping(90)
        pwm.set_pwm(5, 0, ch5Deg)
        pwm.set_pwm(7, 0, ch7Deg)
        time.sleep(0.6)
        pwm.set_pwm(5, ch5Deg, 0)
        pwm.set_pwm(7, ch7Deg, 0)
        time.sleep(0.6)

        ch5Deg = maping(135)
        ch7Deg = maping(135)
        pwm.set_pwm(5, 0, ch5Deg)
        pwm.set_pwm(7, 0, ch7Deg)
        time.sleep(0.6)
        pwm.set_pwm(5, ch5Deg, 0)
        pwm.set_pwm(7, ch7Deg, 0)
        time.sleep(0.6)

        
        #pwm.set_all_pwm(0, int(mapped_value))
        """pwm.set_pwm(0, 0, servo_min)
        time.sleep(1)
        pwm.set_pwm(0, 0, servo_max)
        time.sleep(1)"""

except KeyboardInterrupt:
    print("User quit! Moving servo to middle position.")
    midFront = maping(120)
    center = maping(135)
    time.sleep(2)
    pwm.set_pwm(4, 0, midFront)
    pwm.set_pwm(6, 0, midFront)
    pwm.set_pwm(5, 0, center)
    pwm.set_pwm(7, 0, center)
    time.sleep(2)
